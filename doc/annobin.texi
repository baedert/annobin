\input texinfo @c -*-texinfo-*-
@setfilename annobin.info
@c Copyright (C) 2018 Red Hat.
@settitle Annobin
@setchapternewpage odd

@c man begin INCLUDE
@set VERSION 3.2
@set VERSION_PACKAGE (Annobin) 
@set UPDATED February 2018
@c man end

@ifnottex
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.  zoo@cygnus.com is developing this facility.
@dircategory Software development
@direntry
* annobin: (annobin).                Annotating your program's compilation
@end direntry
@end ifnottex

@copying
This file documents the annobin plugin on the Fedora system.

@c man begin COPYRIGHT
Copyright @copyright{} 2018 Red Hat.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@c man end
@end copying

@finalout
@smallbook

@titlepage
@title Annobin
@subtitle The @sc{annobin} plugin
@ifset VERSION_PACKAGE
@subtitle @value{VERSION_PACKAGE}
@end ifset
@subtitle Version @value{VERSION}
@author Nick Clifton

@page

This manual describes the @sc{annobin} plugin, and how you can use it
to determine what security features were used when building your binary.

@vskip 0pt plus 1filll
Copyright @copyright{} 2018 Red Hat

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@end titlepage
@contents

@c -----------------------------------------------------------------
@ifnottex
@node Top
@top Annotating Binaries: How Was Your Program Built ?

This manual describes the @sc{annobin} plugin, and how you can use it
to determine what security features were used when building your binary.

This manual is for @code{annobin}
@ifset VERSION_PACKAGE
@value{VERSION_PACKAGE}
@end ifset
version @value{VERSION}.

This document is distributed under the terms of the GNU Free
Documentation License version 1.3.  A copy of the license is included
in the section entitled ``GNU Free Documentation License''.

@menu
* Introduction::    What is Binary Annotation ?
* Invocation::      How to add Binary Annotations to your application.
* Checking::        How to examine the information stored in the binary.
* Using::           How to use the information stored in the binary.
* GNU FDL::         GNU Free Documentation License
@end menu
@end ifnottex

@c -----------------------------------------------------------------
@node Introduction
@chapter What is Binary Annotation ?

Binary Annotation is a method for recording information about an
application inside the application itself.  It is an implementation of
the @code{Watermark} specification defined here:
@url{https://fedoraproject.org/wiki/Toolchain/Watermark}

Although mainly focused on recording security information, the system
can be used to record any kind of data, even data not related to the
application.  One of the main goals of the system however is the
ability to specify the address range over which a given piece of
information is valid.  So for example it is possible to specify that
all of a program was compiled with the @option{-O2} option except for
one special function which was compiled with @option{-O0} instead.

The range information is useful because it allows third parties to
examine the binary and find out if its construction was consistent.
Ie that there are no gaps in the recorded information, and no special
cases where a required feature was not active.

The system works by adding a special section to the application
containing individual pieces of information along with an address
range for which the information is valid.  (Some effort has gone into
the storing this information in a reasonably compact format).

The information is generated by a plugin that is attached to the
@code{gcc} compiler.  (This is just one method for generating the
information.  Any interested party can create and add information to
the binary, providing that they follow the Watermark specification).
This plugin is called @code{annobin}.  It uses information obtained
from the compiler to record details such as the ABI variant in use and
the hardening options applied.

The information can be extracted from files via the use of tools like
@code{readelf}.  The @code{annobin} package includes a set of sample
scripts that use @code{readelf} in this way to check various features
of an application, such as its conformation to the hardening
requirements, or possible ABI violations.


@c -----------------------------------------------------------------
@node Invocation
@chapter How to add Binary Annotations to your application.

Normally the option to enable the recording of binary annotation notes
is enabled automatically by the build system, so no user intervention
is required.  On Fedora and RHEL based systems this is handled by the
@samp{redhat-rpm-config} package.

Currently the binary annotations are generated by a plugin to the
@code{GCC} compiler called @samp{annobin}.  This does mean that files
that are not compiled with @code{GCC} will not gain any binary
annotations.  Solving this problem is one of the future goals of the
annobin project.

If the build system being used does not automatically enabled the
@samp{annobin} plugin then it can be specifically added to the gcc
command line by adding the @option{-fplugin=annobin} option.  It may
also be necessary to tell gcc where to find plugins by adding the
@option{-iplugindir=} option, although this should only be necessary
if the plugin is installed in a separate place from @code{gcc}.

If it is desired to disable the recording of binary annotations then
the @option{-fplugin-arg-annobin-disable} can be used, although this
must be placed @emph{after} the @option{-fplugin=annobin} option.

On Fedora and RHEL systems the plugin can be disabled entirely for all
compilations in a package by adding @option{%undefine
_annotated_build} to the spec file.

The plugin also accepts a small selection of command line arguments,
all accessed by passing @option{-fplugin-arg-annobin-<option>} on the
gcc command line.  These options must be placed on the gcc command
line after the plugin itself is mentioned.  The options are:

@table @code
@item disable
@itemx enable
Either disable or enable the plugin.  The default is for the plugin to
be enabled.

@item help
Display a list of supported options on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item version
Display the version of the plugin on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item verbose
Report the actions that the plugin is taking.  If invoked for a second
time on the command line the plugin will be very verbose.

@item function-verbose
Report the generation of function specific notes.  This indicates that
the named function was compiled with different options from those that
were globally enabled.

@item no-dynamic-notes
@itemx dynamic-notes
Do not, or do, record information for the dynamic loader.  The default
is to record this information.

@item no-static-notes
@itemx static-notes
Do not, or do, record information for static analysis.  The default is
to record this information.

@item stack-size-notes
@itemx no-stack-size-notes
Do, or do not, record information about the stack requirements of
functions in the executable.  This feature is disabled by default as
these notes can take up a lot of extra room if the executable contains
a lot of functions.

@item stack-threshold=@var{N}
If stack size requirements are being recorded then this option sets
the minimum value to record.  Functions which require less than
@code{N} bytes of static stack space will not have their requirements
recorded.  If not set, then @code{N} defaults to 1024.

@item global-file-syms
@itemx no-global-file-syms
If enabled the @option{global-file-syms} option will create globally
visible, unique symbols to mark the start and end of the compiled
code.  This can be desirable if a program consists of multiple source
files with the same name, or if it links to a library that was built
with source files of the same name as the program itself.  The
disadvantage of this feature however is that the unique names are
based upon the time of the build, so repeated builds of the same
source will have different symbol names inside it.  This breaks the
functionality of the build-id system which is meant to identify
similar builds created at different times.  This feature is disabled
by default, and if enabled can be disabled again via the
@option{no-global-file-syms} option.

@end table

@c -----------------------------------------------------------------
@node Checking
@chapter How to examine the information stored in the binary.

The information is stored in the ELF Note format in a special section
called @code{.gnu.build.attributes}.  The @code{readelf} program from
the @code{binutils} package can extract and display these notes when
the @option{--notes} option is provided.  (Adding the @option{--wide}
option is also helpful).  Here is an example of the output:

@smallexample
Displaying notes found in: .gnu.build.attributes
  Owner                        Data size	Description
  GA$<version>3p3              0x00000010	OPEN	    Applies to region from 0x8a0 to 0x8c6 (hello.c)
  GA$<tool>gcc 7.2.1 20170915  0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x452b                0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*<stack prot>strong        0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x412b                0x00000010	func	    Applies to region from 0x8c0 to 0x8c6 (baz)
@end smallexample

This shows various different pieces of information, including the fact
that the notes were produced using version 3 of the specification, and
version 3 of the plugin.  The binary was built by gcc version 7.2.1
and the -fstack-protector-strong option was enabled on the command
line.  The program was compiled with -O2 enabled except the baz()
function which was compiled with -O0 instead.

The most complicated part of the notes is the owner field.  This is
used to encode the type of note as well as its value and possibly
extra data as well.  The format of the field is explained in detail in
the Watermark specification, but it basically consists of the letters
@samp{G} and @samp{A} followed by an encoding character (one of
@samp{*$!+}) and then a type character and finally the value.

Most of the notes have a reasonably self explanatory name and value.
The exception are the @code{version} and @code{GOW} notes, which are
explained below.

@menu
* The Version Encoding::  Encoding Versions
* The PIC Encoding::      Encoding Position Independence
* The GOW Encoding::      Encoding Optimization and Debugging Levels
* The CF Encoding::       Encoding Control Flow Protection
* The CET Encoding::      Encoding Control Flow Enforcement Technology
@end menu

@c -----------------------------------------------------------------
@node The Version Encoding
@section Encoding Protocol and Producer Versions
The @code{version} note encodes the version of the Watermark
specification used and the version of the tool used to generate the
notes.  Typically the protocol version will be 3 and the plugin
version will be 5.

@c -----------------------------------------------------------------
@node The PIC Encoding
@section Encoding Position Independence
The @code{Position Independence Status} note encodes the setting of
the @option{-fpic}/@option{-fpie} used when compiling the program.
The value of the note can be

@table @code
@item 0
Static code, ie neither pic nor pie.

@item 1
Compiled with @option{-fpic}.

@item 2
Compiled with @option{-fPIC}.

@item 3
Compiled with @option{-fpie}.

@item 4
Compiled with @option{-fPIE}

@end table

If both @option{pic} and @option{pie} have been specified on the
command line then @option{pie} takes the precedence in the encoding.

@c -----------------------------------------------------------------
@node The GOW Encoding
@section Encoding Optimization and Debugging Levels

The @code{GOW} note encodes the optimization level (@option{-O}) and
debugging level (@option{-g}) used when compiling a binary.  In order
to save space this is stored as a bit field with the bits having the
following meanings:

@table @code
@item bits 0 - 2
The debug type, ie DBX, DWARF, VMS or XCOFF.  As specified by the
@option{-gstabs}, @option{-gdwarf}, @option{-gvms} and
@option{-gxcoff} options.

@item bit  3
Set if GNU extensions to the debug type have been enabled.

@item bits 4 - 5
The debug info level ie TERSE, NORMAL or VERBOSE as set by the
@option{-g<level>} option.

@item bits 6 -  8
The DWARF version, if DWARF is being generated.  Set by the
@option{-gdwarf-<version>} option.

@item bits 9 - 10
The optimization level as set by the @option{-O<number>} option.
Levels above 3 are treated as if they were 3.

@item bit 11
Set if the optimize-for-size option (@option{-Os}) is enabled.

@item bit 12
Set if the inaccurate-but-fast optimization option (@option{-Ofast})
has been enabled.

@item bit 13
Set if the optimize-with-debugging option (@option{-Og}) has been
enabled.

@item bit 14
Set if the enable most warnings option (@option{-Wall}) has been
enabled.
@end table

The other bits are not currently used and should be set to zero so
they can be used in future extensions to the specification.

@c -----------------------------------------------------------------
@node The CF Encoding
@section Encoding Control Flow Protection
Records the setting of the @option{-cf-protection} option.  This is a
bit mask using the following bits, based upon the definition of the
@code{enum cf_protection_level} from gcc's @code{flag-types.h} header
file:

@table @code
@item bit 0
Branches are protected.  (ie @option{-fcf-protection=branch}).

@item bit 1
Returns are protected.  (ie @option{-fcf-protection=return}).

@item bit 2
If set, this indicates that the other bits were explicitly set by an
option on the gcc command line.  Otherwise those bits were implicitly
set by either other options or the backend concerned.
@end table

If both bits 0 and 1 are set then this implies the
@option{-fcf-protection=full} option, and if neither are set then this
implies the @option{-fcf-protection=none} option.

Note - in order to avoid storing a value of 0 in the note (which can
be confused with a NUL-byte to indicate the end of a string), the
value stored is biased by 1.

@c -----------------------------------------------------------------
@node The CET Encoding
@section Encoding Control Flow Enforcement Technology
Records the setting of the Control Flow Enforcement Technology
options.  (These are specific to the x86_64 port of gcc).  The value
is a sequence of bytes that indicate various different flags:

@table @code
@item byte 0
The setting of the @option{-mcet} option.  This is either 1 (not set)
or 2 (set).

@item byte 1
The setting of the @option{-mcet-switch} option.  This is either 1
(not set) or 2 (set).

@item byte 2
The setting of the @option{-mibt} option.  This is either 1 (not set)
or 2 (set).

@item byte 3
The setting of the @option{-mshstk} option.  This is either 1 (not
set) or 2 (set).
@end table

@c -----------------------------------------------------------------
@node Using
@chapter How to use the information stored in the binary.

The @command{annobin} package includes some example scripts that
demonstrate how the binary information can be used.  The scripts are:

@menu
* Who Built Me::       The built-by.sh script
* ABI Checking::       The check-abi.sh script
* Hardening Checks::   The hardened.sh script
* Checking Archives::  The run-on-binaries-in.sh script
@end menu

@c -----------------------------------------------------------------
@node Who Built Me
@section The built-by.sh script

@smallexample
built-by.sh
  [@option{--help}]
  [@option{--version}]
  [@option{--verbose}]
  [@option{--quiet}]
  [@option{--silent}]
  [@option{--ignore}]
  [@option{--readelf=}@file{path}]
  [@option{--tmpdir=}@file{dir}]
  [@option{--tool=}@var{name}]
  [@option{--nottool=}@var{name}]
  [@option{--before=}@var{date}]
  [@option{--after=}@var{date}]
  [@option{--minver=}@var{version}]
  [@option{--maxver=}@var{version}]
  [@option{--}]
  @var{file}@dots{}
@end smallexample

The @file{built-by.sh} script reports the name and version of the tool
used to build the specified file(s).  This script also demonstrates
how information can be extracted from other other locations in the
file, not just the binary annotation notes.

The script can also be used to filter files, only reporting those
built by a specific tool, or a specific version of a tool, or even by
a version of a tool that was built between a range of dates.

The options available are:

@table @samp

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --ignore
Do not report file types that do not contain any builder information.

@item --tool=@var{name}
Only report binaries built by @var{name}.  The @var{name} is only an
ordinary string, not a regular expression.

@item --nottool=@var{name}
Skip any binary build by @var{name}.  The @var{name} is only an
ordinary string, not a regular expression.

@item --before=@var{date}
Only report binaries built by a tool that was created before
@var{date}.  @var{date} has the format @var{YYYYMMDD}.

@item --after=@var{date}
Only report binaries built by a tool that was created after
@var{date}.  When combined with the @option{--before} option can be
used to restrict output to files which were built by tools created in
a specific date range.

@item --minver=@var{version}
Only report binaries built by a tool whose version is @var{version} or
higher.  The @var{version} string should be in the form @var{V.V.V},
for example @var{6.2.1}.

@item --maxver=@var{version}
Only report binaries built by a tool whoes version is @var{version} or
lower.  Can be combined with the @option{--minver} option to restrict
output to those binaries created by tools within a specific version
range.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table


@c -----------------------------------------------------------------
@node ABI Checking
@section The check-abi.sh script

@smallexample
check-abi.sh
  [@option{--help}]
  [@option{--version}]
  [@option{--verbose}]
  [@option{--quiet}]
  [@option{--silent}]
  [@option{--inconsistencies}]
  [@option{--ignore-unknown}]
  [@option{--ignore-}@var{ABI|enum|FORTIFY|stack-prot}]
  [@option{--readelf=}@file{path}]
  [@option{--tmpdir=}@file{dir}]
  [@option{--}]
  @var{file}@dots{}
@end smallexample

The @file{check-abi.sh} script reports any potential ABI conflicts in
the files specified.  This includes the use of the
@option{-fshort-enums} option, the @option{-fstack-protector} option
and the @option{-D_FORTIFY_SOURCE} option.  All of these can affect
passing data between functions and hence should be used uniformly
throughout the binary.

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --inconsitencies
@itemx -i
Only report files with potential ABI problems.

@item --ignore-unknown
Do not report file types that are not supported or recognised.

@item --ignore-@var{ABI|enum|FORTIFY|stack-prot}
Disables individual ABI checks.  Multiple occurences of this option
accumulate.  Possible option values are:

@table @samp
@item ABI
Disable checks of the general ABI information.

@item enum
Disable checks of the @option{-fshort-enum} option.

@item FORTIFY
Disable checks of the @samp{-D_FORTIFY_SOURCE} option.

@item stack-prot
Disable checks of the @option{-fstack-protect} option.
@end table

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table

@c -----------------------------------------------------------------
@node Hardening Checks
@section The hardened.sh script

@smallexample
hardened.sh
  [@option{--help}]
  [@option{--version}]
  [@option{--verbose}]
  [@option{--quiet}]
  [@option{--ignore-unknown}]
  [@option{--silent}]
  [@option{--vulnerable}]
  [@option{--not-hardened}]
  [@option{--all}]
  [@option{--file-type=}@var{auto|lib|exec|obj}]
  [@option{--skip=}@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet}]
  [@option{--readelf=}@file{path}]
  [@option{--tmpdir=}@file{dir}]
  [@option{--}]
  @var{file}@dots{}
@end smallexample

The @file{hardened.sh} script reports on the hardening status of the
specified file(s).  In particular it checks that the whole file was
compiled with @option{-O2} or higher and the
@option{-fstack-protector-strong}, @option{-D_FORTIFY_SOURCE=2},
@option{-Wl,-z,now}, @option{-Wl,-z,relro}, @option{-fPIE}, 
@option{-Wp,-D_GLIBCXX_ASSERTIONS}, @option{-fstack-clash-protection}
@option{-fcf-protection=full} and @option{-mcet}
options.

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --ignore-unknown
@itemx -i
Do not report file types that are not supported or recognised.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --vulnerable
@itemx -u
Only report files that are known to be vulnerable.  Ie files that
record all of the necessary information about how they were built,
but which were built with an incorrect set of options.

This option is the default behaviour of the script.

@item --not-hardened
@itemx -n
Report any file that cannot be proven to be hardened.  This is like
the @option{--vulnerable} option, except that it will also report
files that do not record all of the necessary information.

@item --all
@itemx -a
Report the hardening status of all of the files examined.

@item --file-type=@var{auto|lib|exec|obj}
@itemx -f=@var{auto|lib|exec|obj}
Specifies the type of file being examined.  Possible values are:

@table @samp
@item auto
Automatically determine the file type from its extension.
This is the default.
@item lib
Assume all files are shared libraries.  Checks that the @option{-fPIC}
option was used.
@item exec
Assume all files are executables.  Checks that the @option{-fPIE}
option was used.
@item obj
Assume all files are object files.  Skips checks of the bind now status.
@end table

@item --skip=@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet}
@itemx -k=@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet}
Disables checks of various different hardening features.    This
option can be repeated multiple times, and the values accumulate.
Possible values are:

@table @samp
@item opt
Disables checks of the optimization level used.

@item stack
Disables checks of the stack protection level.

@item fort
Disables checks for @env{-D_FORTIFY_SOURCE}.

@item now
Disables checks for @samp{BIND NOW} status.

@item relro
Disables checks for @samp{relro} or read-only-relocs.

@item pic
Disables checks for @option{-fPIC}/@option{-fPIE}.

@item operator
Disables checks for @samp{-D_GLIBCXX_ASSERTIONS}.

@item clash
Disables checks for stack clash protection.

@item cf
Disables checks for control flow protections.

@item cet
Disables checks for control flow enforcement.
@end table

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table

@c -----------------------------------------------------------------
@node Checking Archives
@section The run-on-binaries-in.sh script

@smallexample
run-on-binaries-in.sh
  [@option{--help}]
  [@option{--version}]
  [@option{--verbose}]
  [@option{--quiet}]
  [@option{--ignore}]
  [@option{--prefix=}@samp{text}]
  [@option{--tmpdir=}@file{dir}]
  [@option{--files-from=}@file{file}]
  [@option{--skip-list=}@file{file}]
  [@option{--}]
  @file{program}
  [@option{program-options}]
  @var{file}@dots{}
@end smallexample

The @file{run-on-binaries-in.sh} script allows other scripts, or
programs, to be run on the executable files contained inside archives.
This includes @samp{rpm} files, @samp{tar} and @samp{ar} files and
compressed files.

The script does not recurse into directories, but this can be handled
by the @code{find} command, like this:

@smallexample
  find . -type f -exec run-on-binaries-in.sh <script-to-run> @{@} \;
@end smallexample

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

If this option is repeated it has the special effect of cancelling out
the automatic addition of the  @option{-i} to recursive invocations of
the script.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --ignore
@itemx -i
Do not report file types that are not supported or recognised.

This option is automatically enabled when the script is recursively
invoked on an archive, unless the @option{-V} @option{-V} has been
enabled.  This is because it is assumed that archives are likely to
contain files that do not need to be scanned.

@item --prefix=@samp{text}
@itemx -p=@samp{text}
Add this text to the output from the script when it runs the program
on a normal executable.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --files-from=@file{file}
@itemx -f=@file{file}
Specifies a file containing a list of other files to examine,
one per line.

@item --skip-list=@file{file}
@itemx -s=@file{file}
Specifies a file containing a list of files not to examine, one per
line.  Blank lines and comments are ignored.  Text after a file's name
is also ignored.  Filenames should start at the beginning of a line.

@item --
Stops processing of command line options.  This allows the script to
be run with a program whoes name starts with a dash.

@end table

@c -----------------------------------------------------------------
@node GNU FDL
@appendix GNU Free Documentation License
@include fdl.texi

@bye

