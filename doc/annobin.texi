\input texinfo @c -*-texinfo-*-
@setfilename annobin.info
@c Copyright (C) 2018 Red Hat.
@settitle Annobin
@setchapternewpage odd

@c man begin INCLUDE
@set VERSION 3.1
@set VERSION_PACKAGE (Annobin) 
@set UPDATED January 2018
@c man end

@ifnottex
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.  zoo@cygnus.com is developing this facility.
@dircategory Software development
@direntry
* annobin: (annobin).                Annotating your program's compilation
@end direntry
@end ifnottex

@copying
This file documents the annobin plugin on the Fedora system.

@c man begin COPYRIGHT
Copyright @copyright{} 2018 Red Hat.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@c man end
@end copying

@finalout
@smallbook

@titlepage
@title Annobin
@subtitle The @sc{annobin} plugin
@ifset VERSION_PACKAGE
@subtitle @value{VERSION_PACKAGE}
@end ifset
@subtitle Version @value{VERSION}
@author Nick Clifton

@page

This manual describes the @sc{annobin} plugin, and how you can use it
to determine what security features were used when building your binary.

@vskip 0pt plus 1filll
Copyright @copyright{} 2018 Red Hat

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@end titlepage
@contents

@ifnottex
@node Top
@top Annotating Binaries: How Was Your Program Built ?

This manual describes the @sc{annobin} plugin, and how you can use it
to determine what security features were used when building your binary.

This manual is for @code{annobin}
@ifset VERSION_PACKAGE
@value{VERSION_PACKAGE}
@end ifset
version @value{VERSION}.

This document is distributed under the terms of the GNU Free
Documentation License version 1.3.  A copy of the license is included
in the section entitled ``GNU Free Documentation License''.

@menu
* Introduction::        What is Binary Annotation ?
* Invocation::          How to add Binary Annotations to your application.
* Checking::            How to examine the information stored in the binary.
* GNU Free Documentation License::  GNU Free Documentation License
@end menu
@end ifnottex

@node Introduction
@chapter What is Binary Annotation ?

Binary Annotation is a method for recording information about an
application inside the application itself.  It is an implementation of
the @code{Watermark} specification defined here:
@url{https://fedoraproject.org/wiki/Toolchain/Watermark}

Although mainly focused on recording security information, the system
can be used to record any kind of data, even data not related to the
application.  One of the main goals of the system however is the
ability to specify the address range over which a given piece of
information is valid.  So for example it is possible to specify that
all of a program was compiled with the @option{-O2} option except for
one special function which was compiled with @option{-O0} instead.

The range information is useful because it allows third parties to
examine the binary and find out if its construction was consistent.
Ie that there are no gaps in the recorded information, and no special
cases where a required feature was not active.

The system works by adding a special section to the application
containing individual pieces of information along with an address
range for which the information is valid.  (Some effort has gone into
the storing this information in a reasonably compact format).

The information is generated by a plugin that is attached to the
@code{gcc} compiler.  (This is just one method for generating the
information.  Any interested party can create and add information to
the binary, providing that they follow the Watermark specification).
This plugin is called @code{annobin}.  It uses information obtained
from the compiler to record details such as the ABI variant in use and
the hardening options applied.

The information can be extracted from files via the use of tools like
@code{readelf}.  The @code{annobin} package includes a set of sample
scripts that use @code{readelf} in this way to check various features
of an application, such as its conformation to the hardening
requirements, or possible ABI violations.


@node Invocation
@chapter How to add Binary Annotations to your application.

Normally the option to enable the recording of binary annotation notes
is enabled automatically by the build system, so no user intervention
is required.  On Fedora and RHEL based systems this is handled by the
@samp{redhat-rpm-config} package.

If necessary however the binary annotation plugin can be specifically
added to the gcc command line by adding the @option{-fplugin=annobin}
option.  It may also be necessary to tell gcc where to find plugins by
adding the @option{-iplugindir=} option, although this should only be
necessary if the plugin is installed in a separate place from
@code{gcc}.

If it is desired to disable the recording of binary annotations then
the @option{-fplugin-arg-annobin-disable} can be used, although this
must be placed @emph{after} the @option{-fplugin=annobin} option.

On Fedora and RHEL systems the plugin can be disabled entirely for all
compilations in a package by adding @option{%undefine
_annotated_build} to the spec file.

The plugin also accepts a small selection of command line arguments,
all accessed by passing @option{-fplugin-arg-annobin-<option>} on the
gcc command line.  These options must be placed on the gcc command
line after the plugin itself is mentioned.  The options are:

@table @code
@item disable
@itemx enable
Either disable or enable the plugin.  The default is for the plugin to
be enabled.

@item help
Display a list of supported options on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item version
Display the version of the plugin on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item verbose
Report the actions that the plugin is taking.  If invoked for a second
time on the command line the plugin will be very verbose.

@item no-dynamic-notes
@itemx dynamic-notes
Do not, or do, record information for the dynamic loader.  The default
is to record this information.

@item no-static-notes
@itemx static-notes
Do not, or do, record information for static analysis.  The default is
to record this information.

@item stack-size-notes
@itemx no-stack-size-notes
Do, or do not, record information about the stack requirements of
functions in the executable.  This feature is disabled by default as
these notes can take up a lot of extra room if the executable contains
a lot of functions.

@item stack-threshold=@var{N}
If stack size requirements are being recorded then this option sets
the minimum value to record.  Functions which require less than
@code{N} bytes of static stack space will not have their requirements
recorded.  If not set, then @code{N} defaults to 1024.

@end table


@node Checking
@chapter How to examine the Binary Annotations stored in an application.

The information is stored in the ELF Note format in a special section
called @code{.gnu.build.attributes}.  The @code{readelf} program from
the @code{binutils} package can extract and display these notes when
the @option{--notes} option is provided.  (Adding the @option{--wide}
option is also helpful).  Here is an example of the output:

@smallexample
Displaying notes found in: .gnu.build.attributes
  Owner                        Data size	Description
  GA$<version>3p3              0x00000010	OPEN	    Applies to region from 0x8a0 to 0x8c6 (hello.c)
  GA$<tool>gcc 7.2.1 20170915  0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x452b                0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*<stack prot>strong        0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x412b                0x00000010	func	    Applies to region from 0x8c0 to 0x8c6 (baz)
@end smallexample

This shows various different pieces of information, including the fact
that the notes were produced using version 3 of the specification, and
version 3 of the plugin.  The binary was built by gcc version 7.2.1
and the -fstack-protector-strong option was enabled on the command
line.  The program was compiled with -O2 enabled except the baz()
function which was compiled with -O0 instead.

The most complicated part of the notes is the owner field.  This is
used to encode the type of note as well as its value and possibly
extra data as well.  The format of the field is explained in detail in
the Watermark specification, but it basically consists of the letters
@samp{G} and @samp{A} followed by an encoding character (one of
@samp{*$!+}) and then a type character and finally the value.

Most of the notes have a reasonably self explanatory name and value.
The exception are the @code{version} and @code{GOW} notes, which are
explained below.

@menu
* The Version Encoding::  Encoding Versions
* The GOW Encoding::      Encoding Optimization and Debugging Levels
@end menu

The @command{annobin} package includes some example scripts that
demonstrate how the binary information can be used.  The scripts are:

@table @code
@item built-by.sh
Reports the name and version of the tool used to build the specified
file(s).  This script also demonstrates how information can be
extracted from other other locations in the file, not just the binary
annotation notes.

The script can also be used to filter files, only reporting those
built by a specific tool, or a specific version of a tool, or even by
a version of a tool that was built between a range of dates.

@item check-abi.sh
Reports any potential ABI conflicts in the files specified.  This
includes the use of the @option{-fshort-enums} option, the
@option{-fstack-protector} option and the @option{-D_FORTIFY_SOURCE}
option.  All of these can affect passing data between functions and
hence should be used uniformly throughout the binary.

@item hardened.sh
Reports on the hardening status of the specified file(s).  In
particular it checks that the whole file was compiled with
@option{-O2} or higher and the @option{-fstack-protector-strong},
@option{-D_FORTIFY_SOURCE=2}, @option{-Wl,-z,now},
@option{-Wl,-z,relro}, @option{-fPIE},
@option{-Wp,-D_GLIBCXX_ASSERTIONS} and
@option{-fstack-clash-protection} options.

@end table


@node The Version Encoding
@section Encoding Protocol and Producer Versions
The @code{version} note encodes the version of the Watermark
specification used and the version of the tool used to generate the
notes.  Typically these will both be 3.

@node The GOW Encoding
@section Encoding Optimization and Debugging Levels

The @code{GOW} note encodes the optimization level (@option{-O}) and
debugging level (@option{-g}) used when compiling a binary.  In order
to save space this is stored as a bit field with the bits having the
following meanings:

@table @code
@item bits 0 - 2
The debug type, ie DBX, DWARF, VMS or XCOFF.  As specified by the
@option{-gstabs}, @option{-gdwarf}, @option{-gvms} and
@option{-gxcoff} options.

@item bit  3
Set if GNU extensions to the debug type have been enabled.

@item bits 4 - 5
The debug info level ie TERSE, NORMAL or VERBOSE as set by the
@option{-g<level>} option.

@item bits 6 -  8
The DWARF version, if DWARF is being generated.  Set by the
@option{-gdwarf-<version>} option.

@item bits 9 - 10
The optimization level as set by the @option{-O<number>} option.
Levels above 3 are treated as if they were 3.

@item bit 11
Set if the optimize-for-size option (@option{-Os}) is enabled.

@item bit 12
Set if the inaccurate-but-fast optimization option (@option{-Ofast})
has been enabled.

@item bit 13
Set if the optimize-with-debugging option (@option{-Og}) has been
enabled.

@item bit 14
Set if the enable most warnings option (@option{-Wall}) has been
enabled.
@end table

The other bits are not currently used and should be set to zero so
they can be used in future extensions to the specification.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texi

@bye

