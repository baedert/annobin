\input texinfo @c -*-texinfo-*-
@setfilename annobin.info
@c Copyright (C) 2018-2020 Red Hat.
@settitle Annobin
@setchapternewpage odd

@c man begin INCLUDE
@set VERSION 9.0
@set VERSION_PACKAGE (Annobin) 
@set UPDATED January 2020
@c man end

@ifnottex
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.  zoo@cygnus.com is developing this facility.
@dircategory Software development
@direntry
* annobin: (annobin).                Annotating a compiled program
@end direntry
@end ifnottex

@copying
This file documents the annobin plugin on the Fedora system.

@c man begin COPYRIGHT
Copyright @copyright{} 2018 - 2020 Red Hat.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@c man end
@end copying

@finalout
@smallbook

@titlepage
@title Annobin
@subtitle The @sc{annobin} plugin
@ifset VERSION_PACKAGE
@subtitle @value{VERSION_PACKAGE}
@end ifset
@subtitle Version @value{VERSION}
@author Nick Clifton

@page

This manual describes the @sc{annobin} plugin and the
@command{annocheck} program, and how you can use them to determine
what security features were used when a program was built. 

@vskip 0pt plus 1filll
Copyright @copyright{} 2018 - 2020 Red Hat

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@end titlepage
@contents

@c -----------------------------------------------------------------
@ifnottex
@node Top
@top Annotating Binaries: How Was Your Program Built ?

@c man annobin title Annobin - annotating binary files.

This manual describes the @sc{annobin} plugin and the
@command{annocheck} program, and how you can use them to determine
what security features were used when a program was built. 

This manual is for @code{annobin}
@ifset VERSION_PACKAGE
@value{VERSION_PACKAGE}
@end ifset
version @value{VERSION}.

This document is distributed under the terms of the GNU Free
Documentation License version 1.3.  A copy of the license is included
in the section entitled ``GNU Free Documentation License''.

@menu
* Introduction::           What is Binary Annotation ?
* Plugins::                How to add Binary Annotations to your application.
* Examining::              How to examine the information stored in the binary.
* Annocheck::              Analysing your application's compilation.
* Configure Options::      Configuring annobin and annocheck.
* Legacy Scripts::         Other ways to use the information stored in the binary.
* GNU FDL::                GNU Free Documentation License
@end menu
@end ifnottex

@c -----------------------------------------------------------------
@node Introduction
@chapter What is Binary Annotation ?

@c man begin DESCRIPTION annobin

Binary Annotation is a method for recording information about an
application inside the application itself.  It is an implementation of
the @code{Watermark} specification defined here:
@url{https://fedoraproject.org/wiki/Toolchain/Watermark}

Although mainly focused on recording security information, the system
can be used to record any kind of data, even data not related to the
application.  One of the main goals of the system however is the
ability to specify the address range over which a given piece of
information is valid.  So for example it is possible to specify that
all of a program was compiled with the @option{-O2} option except for
one special function which was compiled with @option{-O0} instead.

The range information is useful because it allows third parties to
examine the binary and find out if its construction was consistent.
IE that there are no gaps in the recorded information, and no special
cases where a required feature was not active.

The system works by adding special sections to the application
containing individual pieces of information along with an address
range for which the information is valid.  (Some effort has gone into
the storing this information in a reasonably compact format).

The information is generated by a plugin that is attached to the
compiler (either @code{gcc}, @code{clang} or @code{llvm}).  The plugin
is called @code{annobin} and it extracts information from the
internals of compiler and records them in the object file(s) being
produced.

Note - the plugin method is just one way of generating the
information.  Any interested party can create and add information to
the objhect file, providing that they follow the Watermark
specification.

The information can be extracted from files via the use of tools like
@code{readelf} and @code{objdump}.  The @code{annobin} package itself
includes a program called @command{annocheck} which can can also
examine this information.  Details on this program can be found
elsewhere in this documentation.

@c man end

@c -----------------------------------------------------------------
@node Plugins
@chapter How to add Binary Annotations to your application.

@c man begin DESCRIPTION annobin

Normally the option to enable the recording of binary annotation notes
is enabled automatically by the build system, so no user intervention
is required.  On Fedora and RHEL based systems this is handled by the
@samp{redhat-rpm-config} package.

Currently the binary annotations are generated by a plugin to the
compiler (@code{GCC}, @code{clang} or @code{llvm}).  This does mean
that files that are not compiled by any of these compilers will not
gain any annotations, although there is an optional assembler switch to
add some basic notes if none are present in the input files.

If the build system being used does not automatically enable the
@samp{annobin} plugin then it can be specifically added to the compiler
command line by adding the @option{-fplugin=annobin} (for gcc) or
@option{-fplugin=annobin-for-clang} (for clang) or
@option{-fpluin=annobin-for-llvm} (for LLVM) option.  It may
also be necessary to tell the compiler where to find the plugin by
adding the @option{-iplugindir=} option, although this should only be
necessary if the plugin is installed in an unusual place.

If it is desired to disable the recording of binary annotations then
the @option{-fplugin-arg-annobin-disable} (for @code{gcc}) or
@option{-Xclang -plugin-arg-annobin-disable} (for @code{clang} or
@code{llvm}) can be used.  Note - these options must be placed
@emph{after} the @option{-fplugin=annobin} option.

On Fedora and RHEL systems the plugin can be disabled entirely for all
compilations in a package by adding
@option{%undefine _annotated_build} to the spec file.

@c man end
@c man begin OPTIONS annobin

The plugin accepts a small selection of command line arguments,
all accessed by passing
@option{-fplugin-arg-annobin-<option>} (for @code{gcc}) or
@option{-Xclang -plugin-arg-annobin-<option>} (for @code{clang} or
@code{llvm}) on the command line.  These options must be placed on
the command line after the plugin itself is mentioned.  Note - not all
versions of the plugin accept all of these options.  The options are:

@table @code
@item disable
@itemx enable
Either disable or enable the plugin.  The default is for the plugin to
be enabled.

@item help
Display a list of supported options on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item version
Display the version of the plugin on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.

@item verbose
Report the actions that the plugin is taking.  If invoked for a second
time on the command line the plugin will be very verbose.

@item function-verbose
Report the generation of function specific notes.  This indicates that
the named function was compiled with different options from those that
were globally enabled.

@item no-dynamic-notes
@itemx dynamic-notes
Do not, or do, record information for the dynamic loader.  The default
is to record this information.

@item no-static-notes
@itemx static-notes
Do not, or do, record information for static analysis.  The default is
to record this information.

@item stack-size-notes
@itemx no-stack-size-notes
Do, or do not, record information about the stack requirements of
functions in the executable.  This feature is disabled by default as
these notes can take up a lot of extra room if the executable contains
a lot of functions.

@item stack-threshold=@var{N}
If stack size requirements are being recorded then this option sets
the minimum value to record.  Functions which require less than
@code{N} bytes of static stack space will not have their requirements
recorded.  If not set, then @code{N} defaults to 1024.

@item global-file-syms
@itemx no-global-file-syms
If enabled the @option{global-file-syms} option will create globally
visible, unique symbols to mark the start and end of the compiled
code.  This can be desirable if a program consists of multiple source
files with the same name, or if it links to a library that was built
with source files of the same name as the program itself.  The
disadvantage of this feature however is that the unique names are
based upon the time of the build, so repeated builds of the same
source will have different symbol names inside it.  This breaks the
functionality of the build-id system which is meant to identify
similar builds created at different times.  This feature is disabled
by default, and if enabled can be disabled again via the
@option{no-global-file-syms} option.

@item attach
@itemx no-attach
When gcc compiles code with the @option{-ffunction-sections} option
active it will place each function into its own section.  When the
annobin @option{attach} option is active the plugin will attempt to
attach the function section to a group containing the notes and
relocations for the function.  In that way, if the linker decides to
discard the function, it will also know that it should discard the
notes and relocations as well.

The default is to enable @option{attach}, but the inverse option is
available in case the host assembler does not support the
@option{.attach_to_group} pseudo-op.  If this feature is disabled then
note generation for function sections will not work properly.

@item rename
Adds an extra prefix to the symbol names generated by the
@code{annobin} plugin.  This allows the plugin to be run twice on the
same executable, which can be useful for debugging and build testing.

@item active-checks
@item no-active-checks
The @option{active-checks} option enables compile time checking by
the annobin plugin.  The plugin will actively examine the gcc command
line and generate errors if required security options are missing or
have the wrong value.  The default is not to perform these checkes.

Note - this option is currently under development, and is not yet
fully functional.
@end table
@c man end

The plugins record information appropriate to the compiler that is
running them.  So the @code{gcc} plugin records information about the
following options:
@table @code
@item -D_FORTIFY_SOURCE=2
@item -D_GLIBCXX_ASSERTIONS
@item -O
@item -Wall
@item -fPIC
@item -fPIE
@item -fcf-protection
@item -finstrument_functions
@item -fomit-frame-pointer
@item -fprofile
@item -fprofile-arcs
@item -fsanitize
@item -fshort-enums
@item -fstack-clash-protection
@item -fstack-protector
@item -g
@item -mbranch-protection (AArch64)
@item -mstack-realign (i386)
@item -mtls-size (PowerPC)
@end table

The @code{Clang} plugin records information on the following command
line options:
@table @code
@item -O
@item -Wall
@item -fPIC
@item -fPIE
@item -fcf-protection-branch
@item -fcf-protection-return
@item -fsanitize=cfi-cast-strict
@item -fsanitize=safe-stack
@item -fspeculative-load-hardening
@item -fstack-protector-strong
@end table

The @code{LLVM} plugin records information on the following command
line options:
@table @code
@item -D_FORTIFY_SOURCE=2
@item -O
@item -Wall
@item -fPIC
@item -fPIE
@item -fcf-protection-branch
@item -fcf-protection-return
@item -fsanitize=safe-stack
@item -fstack-protector-strong
@item -g
@end table

@c -----------------------------------------------------------------
@node Examining
@chapter How to examine the information stored in the binary.

@c man begin DESCRIPTION annobin

The information is stored in the ELF Note format in a special section
called @code{.gnu.build.attributes}.  The @code{readelf} program from
the @code{binutils} package can extract and display these notes when
the @option{--notes} option is provided.  (Adding the @option{--wide}
option is also helpful).  Here is an example of the output:

@smallexample
Displaying notes found in: .gnu.build.attributes
  Owner                        Data size	Description
  GA$<version>3p3              0x00000010	OPEN	    Applies to region from 0x8a0 to 0x8c6 (hello.c)
  GA$<tool>gcc 7.2.1 20170915  0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x452b                0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*<stack prot>strong        0x00000000	OPEN	    Applies to region from 0x8a0 to 0x8c6
  GA*GOW:0x412b                0x00000010	func	    Applies to region from 0x8c0 to 0x8c6 (baz)
@end smallexample

This shows various different pieces of information, including the fact
that the notes were produced using version 3 of the specification, and
version 3 of the plugin.  The binary was built by gcc version 7.2.1
and the -fstack-protector-strong option was enabled on the command
line.  The program was compiled with -O2 enabled except the baz()
function which was compiled with -O0 instead.

The most complicated part of the notes is the owner field.  This is
used to encode the type of note as well as its value and possibly
extra data as well.  The format of the field is explained in detail in
the Watermark specification, but it basically consists of the letters
@samp{G} and @samp{A} followed by an encoding character (one of
@samp{*$!+}) and then a type character and finally the value.

The notes are always four byte aligned, even on 64-bit systems.  This
does mean that consumers of the notes may have to read 8-byte wide
values from 4-byte aligned addresses, and that producers of the
notes may have to generate unaligned relocs when creating them.

@c man end

Most of the notes have a reasonably self explanatory name and value.
The exception are the @code{version} and @code{GOW} notes, which are
included in the table below.

@menu
* The Version Encoding::  Encoding Versions
* The STACK Encoding::    Encoding Stack Protection
* The PIC Encoding::      Encoding Position Independence
* The GOW Encoding::      Encoding Optimization and Debugging Levels
* The CF Encoding::       Encoding Control Flow Protection
* The ENUM Encoding::     Encoding the Size of Enumerations
* The INSTRUMENT Encoding:: Encoding Instrumentation Options
@end menu

@c -----------------------------------------------------------------
@node The Version Encoding
@section Encoding Protocol and Producer Versions
The @code{version} note encodes the version of the Watermark
specification used and the version of the tool used to generate the
notes.  Typically the protocol version will be 3 and the plugin
version will be 5.

@c -----------------------------------------------------------------
@node The STACK Encoding
@section Encoding Stack Protections
The stack protection note (value 2) encodes the setting of the
@option{-fstack-protector} option.  Possible values are:

@table @code
@item 0
Not compiled with any setting of @option{-fstack-protector} (or the
setting is unknown).

@item 1
Compiled with just @option{-fstack-protector}.

@item 2
Compiled with @option{-fstack-protector-all}.

@item 3
Compiled with @option{-fstack-protector-strong}.

@item 4
Compiled with @option{-fstack-protector-explicit}.
@end table

@c -----------------------------------------------------------------
@node The PIC Encoding
@section Encoding Position Independence
The @code{Position Independence Status} note encodes the setting of
the @option{-fpic}/@option{-fpie} used when compiling the program.
The value of the note can be

@table @code
@item 0
Static code, ie neither pic nor pie.

@item 1
Compiled with @option{-fpic}.

@item 2
Compiled with @option{-fPIC}.

@item 3
Compiled with @option{-fpie}.

@item 4
Compiled with @option{-fPIE}

@end table

If both @option{pic} and @option{pie} have been specified on the
command line then @option{pie} takes the precedence in the encoding.

@c -----------------------------------------------------------------
@node The GOW Encoding
@section Encoding Optimization and Debugging Levels

The @code{GOW} note encodes the optimization level (@option{-O}) and
debugging level (@option{-g}) used when compiling a binary.  In order
to save space this is stored as a bit field with the bits having the
following meanings:

@table @code
@item bits 0 - 2
The debug type, ie DBX, DWARF, VMS or XCOFF.  As specified by the
@option{-gstabs}, @option{-gdwarf}, @option{-gvms} and
@option{-gxcoff} options.

@item bit  3
Set if GNU extensions to the debug type have been enabled.

@item bits 4 - 5
The debug info level ie TERSE, NORMAL or VERBOSE as set by the
@option{-g<level>} option.

@item bits 6 -  8
The DWARF version, if DWARF is being generated.  Set by the
@option{-gdwarf-<version>} option.

@item bits 9 - 10
The optimization level as set by the @option{-O<number>} option.
Levels above 3 are treated as if they were 3.

@item bit 11
Set if the optimize-for-size option (@option{-Os}) is enabled.

@item bit 12
Set if the inaccurate-but-fast optimization option (@option{-Ofast})
has been enabled.

@item bit 13
Set if the optimize-with-debugging option (@option{-Og}) has been
enabled.

@item bit 14
Set if the enable most warnings option (@option{-Wall}) has been
enabled.

@item bit 15
Set if the format security warning option (@option{-Wformat-security})
has been enabled.
@end table

The other bits are not currently used and should be set to zero so
they can be used in future extensions to the specification.

@c -----------------------------------------------------------------
@node The CF Encoding
@section Encoding Control Flow Protection
Records the setting of the @option{-cf-protection} option.  This is a
bit mask using the following bits, based upon the definition of the
@code{enum cf_protection_level} from gcc's @code{flag-types.h} header
file:

@table @code
@item bit 0
Branches are protected.  (ie @option{-fcf-protection=branch}).

@item bit 1
Returns are protected.  (ie @option{-fcf-protection=return}).

@item bit 2
If set, this indicates that the other bits were explicitly set by an
option on the gcc command line.  Otherwise those bits were implicitly
set by either other options or the backend concerned.
@end table

If both bits 0 and 1 are set then this implies the
@option{-fcf-protection=full} option, and if neither are set then this
implies the @option{-fcf-protection=none} option.

Note - in order to avoid storing a value of 0 in the note (which can
be confused with a NUL-byte to indicate the end of a string), the
value stored is biased by 1.

@c -----------------------------------------------------------------
@node The ENUM Encoding
@section Encoding the Size of Enumerations
Record the value of the @option{-fshort-enums} option.  Possible
values are:

@table @code
@item true
The @option{-fshort-enums} option has been enabled.

@item false
The @option{-fshort-enums} option has not been enabled.
@end table

@c -----------------------------------------------------------------
@node The INSTRUMENT Encoding
@section Encoding Instrumentation Options
Records the enablement of various code instrumentation options.
Note - this note is only produced if one or more of these options
are enabled.

The note encodes four values, separate by the forward slash (@var{/})
character.  These values are:

@table @code
@item sanitization
Enabled via a plethora of @option{-fsanitize=@dots{}} options these
tell gcc to add extra code to help with various different types of
error checking features.

@item function instrumentation
Enabled via gcc's @option{-finstrument-functions} option, this adds
special function calls at the entry and exit point of every normal
function.

@item profiling
Enabled via gcc's @option{-p} or @option{-pg} options, this adds
instrumentation to the compiled code that generates output suitable
for analysis via the @command{prof} or @command{gprof} programs.

@item arc profiling
Enabled via gcc's @option{-fprofile-arc} option, or one of the meta-
profiling options, this option adds code to record how many times every
branch and function call is executed.

@end table

Each value represents a setting of an internal gcc flag variable.  The
exact meaning of the values is specific to gcc, but any non-zero
number means that the feature has been enabled in some way.

@c -----------------------------------------------------------------
@c -----------------------------------------------------------------
@node Annocheck
@chapter Analysing an application's compilation.

@c man title annocheck Analysing an application's compilation.

@smallexample
@c man begin SYNOPSIS annocheck
annocheck
  [@b{--help}]
  [@b{--version}]
  [@b{--verbose}]
  [@b{--quiet}]
  [@b{--ignore-unknown}]
  [@b{--report-unknown}]
  [@b{--debug-rpm=}@var{file}]
  [@b{--dwarf-dir=}@var{dir}]
  [@b{--prefix=}@var{text}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck

The @command{annocheck} program can analyse programs and report
information about them.  It is designed to be modular, with a set of
self-contained tools providing the checking functionality.
Currently the following tools are implemented:

@menu
* Built-By::  Which tool(s) were used to build the file(s) ?
* Hardened::  Were the file(s) built with the correct security options ?
* Notes::     What annobin notes are inside the file(s) ?
* Section-Size::  What is the cumulative size of specific sections in the file(s) ?
* Timing::    How long did the checks take ?
@end menu

The @command{annocheck} program is able to scan inside rpm files and
libraries.  It will automatically recurse into any directories that
are specified on the command line.  In addition @command{annocheck}
knows how to find debug information held in separate debug files, and
it will search for these whenever it needs the resources that they
contain.

New tools can be added to the annocheck framework by creating a new
source file and including it in the @file{Makefile} used to build
@command{annocheck}.  The modular nature of @command{annocheck} means
that nothing else needs to be updated.

New tools must fill out a @code{struct checker} structure (defined in
@file{annocheck.h}) and they must define a constructor function that
calls @code{annocheck_add_checker} to register their presence at
program start-up.

The @command{annocheck} program supports some generic command line
options that are used regardless of which tools are enabled.

@table @code

@item --debug-rpm=@var{file}
Look in @var{file} for separate dwarf debug information.

@item --dwarf-dir=@var{dir}
Look in @var{dir} for separate dwarf debug information files.

@item --help
Display this message & exit.

@item --report-unknown
@itemx --ignore-unknown
Report file types not recognised by @command{annocheck}.  The default
behaviour can be restored by the @option{--ignore-unknown} option.

@item --prefix=@var{text}
Include @var{text} in the output description.

@item --quiet
Do not print anything, just return an exit status.

@item --verbose
Produce informational messages whilst working.  Repeat for more
information.

@item --version
Report the version of the tool and then exit.

@end table

@c man end

@c -----------------------------------------------------------------
@node Built-By
@section The builder checker.

@smallexample
@c man begin SYNOPSIS annocheck

annocheck
  [@b{--disable-hardened}]
  @b{--enable-builtby}
  [@b{--all}]
  [@b{--tool=}@var{name}]
  [@b{--nottool=}@var{name}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck

The @var{built-by} tool is disabled by default, but it can be enabled
by the command line option @option{--enable-builtby}.  The tool
checks the specified files to see if any information is stored about
how the file was built.

Since the hardening checker is enabled by default it may also be
useful to add the @option{--disable-hardened} option to the command
line.

The tool supports a few command line options to customise its
behaviour:

@table @code

@item --all
Report all builder identification strings.  The tool has several
different heuristics for determining the builder.  By default it will
report the information return by the first successful heuristic.  If
the @option{--all} option is enabled then all successful results will
be returned.

@item --tool=@var{name}
This option can be used to restrict the output to only those files
which were built by a specific tool.  This can be useful when scanning
a directory full of files searching for those built by a particular
compiler.

@item --nottool=@var{NAME}
This option can be used to restrict the output to only those files
which were not built by a specific tool.  This can be useful when
scanning a directory full of files searching for those that were not
built by a particular compiler.

@end table

@c man end

@c -----------------------------------------------------------------
@node Hardened
@section The security checker.

@smallexample
@c man begin SYNOPSIS annocheck

annocheck
  [@b{--skip-bind-now}]
  [@b{--skip-cf-protection}]
  [@b{--skip-dynamic-segment}]
  [@b{--skip-fortify}]
  [@b{--skip-glibcxx-assertions}]
  [@b{--skip-gnu-relro}]
  [@b{--skip-gnu-stack}]
  [@b{--skip-optimization}]
  [@b{--skip-pic}]
  [@b{--skip-pie}]
  [@b{--skip-property-note}]
  [@b{--skip-run-path}]
  [@b{--skip-rwx-seg}]
  [@b{--skip-short-enum}]
  [@b{--skip-stack-clash}]
  [@b{--skip-stack-prot}]
  [@b{--skip-stack-realign}]
  [@b{--skip-textrel}]
  [@b{--skip-threads}]
  [@b{--skip-writeable-got}]
  [@b{--ignore-gaps}]
  [@b{--disable-hardened}]
  [@b{--enable-hardened}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck
The @var{hardened} tool checks that the specified files were compiled
with the required security hardening options, as outlined in the
elf-policy document.  It runs a series of tests checking compilation
options and link time options.  These tests are outlined below, along
with the command line option that can be used to disable each test.

New tests can be added to the @var{hardened} checker by adding an
entry in the @var{tests} array defined in @file{hardened.c} and then
creating the necessary code to support the test.

@table @code

@item BIND_NOW
Lazy binding must not have been enabled via the linker option
@option{-z lazy}.  Instead the @option{-z now} option must have been
used.
Disabled by @option{--skip-bind-now}.

@item Non executable stack
The program must not have a stack in an executable region of memory.
Disabled by @option{--skip-gnu-stack}.

@item Safe GOT relocations
The relocations for the GOT table must be read only.
Disabled by @option{--skip-writeable-got}.

@item No RWX segments.
No program segment should have all three of the read, write and
execute permission bits set.
Disabled by @option{--skip-rwx-seg}.

@item No text relocations
There should be no relocations against executable code.
Disabled by @option{--skip-textrel}.

@item Correct runpaths
The runpath information used to locate shared libraries at runtime
must only include directories rooted at @var{/usr}.
Disabled by @option{--skip-run-path}.

@item Missing annobin data
The program must have been compiled with annobin notes enabled.
Disabled by @option{--ignore-gaps}.

@item Strong stack protection
The program must have been compiled with the
@option{-fstack-protector-strong} option enabled, and with
@option{-D_FORTIFY_SOURCE=2} specified.  It must also have been
compiled at at least optimization level 2.
Disabled by @option{--skip-stack-prot}.

@item Dynamic data present
Dynamic executables must have a dynamic segment.
Disabled by @option{--skip-dynamic-segment}.

@item Position Independent compilation
Shared libraries must have been compiled with @option{-fPIC} or
@code{-fPIE} but not @option{-static}.
This check can be disabled by @option{--skip-pic}.

Dynamic executables must have been compiled with @option{-fPIE} and
linked with @option{-pie}.  This check can be disabled by
@option{--skip-pie}.

@item Safe exceptions
Program which use exception handling must have been compiled with
@option{-fexceptions} enabled and with @option{-D_GLIBCXX_ASSERTIONS}
specified.
Disabled by @option{--skip-threads} and/or @option{--skip-glibcxx-assertions}.

@item Stack Clash protection
If available the @option{-fstack-clash-protection} must have been
used.
Disabled by @option{--skip-stack-clash}.

@item Control Flow protection
If available the @option{-fcf-protection=full} option must have been used.
Disabled by @option{--skip-cf-protection}.  If this option is disabled
then the check for GNU Property notes will also be disabled.

@item Branch protection
For @var{AArch64} binaries the @option{-mbranch-protection} option,
if available, must have been used.
Disabled by @option{--skip-branch-protection}.

@item Stack realignment
For @var{i686} binaries, the @option{-mstackrealign} option must have
been specified.
Disabled by @option{--skip-stack-realign}.

@item Source fortification
The program must have been compiled with the
@option{-D_FORTIFY_SOURCE=2} command line option specified.
Disabled by @option{--skip-fortify}.

@item Optimization
The program must have been compiled with at least @option{-O2}
optimization enabled.
Disabled by @option{--skip-optimization}.

@item Read only relocations
The program must not have any relocations that are held in a writeable
section.
Disabled by @option{--skip-gnu-relro}.

@item GNU Property Note
For @var{x86_64} binaries, check that a correctly formatted GNU
Property note is present.  These notes are only generated with a
program is compiled with the @option{-fcf-protection} gcc option is
enabled, so if annocheck's @option{--skip-cf-protection} option is
enabled then this test will be skipped as well.

@item Enum Size
Check that the program makes consistent use of the
@option{-fshort-enum} option.

@end table

The tool does support a couple of other command line options as well:

@table @code
@item --enable-hardened
Enable the tool if it was previously disabled.  The option is the
default.

@item --disable-hardened
Disable the tool.

@end table

@c man end

@c -----------------------------------------------------------------
@node Notes
@section The annobin note displayer

@smallexample
@c man begin SYNOPSIS annocheck

annocheck
  [@b{--disable-hardened}]
  @b{--enable-notes}
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck

The @var{notes} tool displays the contents of any annobin notes inside
the specified files.  It groups the notes by address range, which
can help locate missing details.

The @var{notes} tool is disabled by default, but it can be enabled
by the command line option @option{--enable-notes}.  Since the
hardening checker is enabled by default it may also be useful to add
the @option{--disable-hardened} option to the command line.

@c man end

@c -----------------------------------------------------------------
@node Section-Size
@section The section size recorder

@smallexample
@c man begin SYNOPSIS annocheck

annocheck
  [@b{--disable-hardened}]
  [@b{--size-sec=@var{name}}]
  [@b{--size-sec-flags=@var{!WAX}}]
  [@b{--size-seg-flags=@var{!WRX}}]
  [@b{--size-human}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck
The @var{section-size} tool records the size of named sections within
a list of files and then reports the accumulated size at the end.
Since it is part of the @command{annocheck} framework, it is able to
handle directories and rpms files as well as ordinary binary files.

The @option{--size-sec=@var{name}} option enables the tool and
tells it to record the size of section @var{name}.  The option can be
repeated multiple times to record the sizes of multiple sections.  It
may also be useful to add the @option{--disable-hardened} option to
the command line as otherwise the security hardening will be run at
the same time.

Instead of searching for named sections, it is also possible to search
for sections with specific flags.  The @option{--size-sec-flags=<flags>}
option will search for any section that has all of the specified
@var{<flags>} set.  Currently only @var{W}, @var{A} and @var{X} are
recognised as flags, indicating that the section must have the
@var{Write}, @var{Alloc} or @var{Execute} flags set respectively.  If
the @var{!} exclamation mark character is present then it negates the
meaning of the following flags.  Thus @option{--section-sec-flags=W}
option will search for any writeable section whereas the
@option{--size-sec-flags=W!A} option will search only for sections
that are writeable but not allocated.

Instead of searching for sections by flags it is also possible to
search for segments by flags using the
@option{--size-seg-flags=<flags>} option.  The flags recognised for
segments are @var{W} for writeable, @var{R} for readable and @var{X}
for executable.  Again the @var{!} character can be used to invert the
meaning of the flags that follow it.

If the @option{--verbose} option is enabled, then the tool will also
report the size of the named section(s) in each file it encounters.
If the @option{--size-human} option is enabled then sizes will be
rounded down to the nearest byte, kibibyte, mebibyte or gibibyte, as
appropriate.

@c man end

@c -----------------------------------------------------------------
@node Timing
@section How long did the check take ?

@smallexample
@c man begin SYNOPSIS annocheck

annocheck
  @b{--enable-timing}
  @var{file}@dots{}
  [@b{--sec}]
  [@b{--usec}]
  [@b{--nsec}]
@c man end
@end smallexample

@c man begin DESCRIPTION annocheck
The @var{timing} tool reports on the time taken by other tools to
scan the list of files.  The tool is disabled by default, but it can
be enabled by the command line option @option{--enable-timing}.

By default the tool will report times in microseconds, but you can
change this to reporting in seconds with the @option{--sec} or in
nanoseconds with the @option{--nsec}.  The default can be restored
with the @option{--usec} option.

@c man end

@c -----------------------------------------------------------------
@node Configure Options
@chapter Configuring annobin and annocheck 

@c man begin
When building annobin and annocheck from the sources there are a
few configure options available to customise the build:

@table @code
@item --with-debuginfod
debuginfod is a web service that indexes ELF/DWARF debugging resources
by build-id and serves them over HTTP.

By default the @command{annocheck} program will be built and linked
with the debuginfod client library @file{libdebuginfod} if it is
present at build time.  The @option{--with-debuginfod} configure
option can be used to force the linking against the library even if
the run-time @command{debuginfod} program cannot be found.
Alternatively the @option{--without debuginfod} can be used to force
annobin to be built without @file{libdebuginfod} support, even if it
is present on the build system.

debuginfod is packaged with elfutils, starting with version 0.178.
You can get the latest version from 'https://sourceware.org/elfutils/'.

@item --with-gmp=PATH
The @option{--with-gmp=PATH} option can be used to specify an
alternative path to the gmp libraries, if necessary.

@item --without-libelf
The annocheck program uses @file{libelf} to read ELF binaries.  By
default the configure system will detect if the library is installed
and if not, then it will disable the building of @command{annocheck}
and the running of the tests.  (Since they use @command{annocheck}).
This behaviour can be overrridden by the @option{--without-libelf}
option which forces the build to assume that libelf is absent even if
it would normally be detected.

@item --without-tests
Disable running the testsuite after building the various binaries.

@item --with-clang
Enable the building of the annobin plugin for the Clang compiler.

@item --with-llvm
Enable the building of the annobin plugin for the LLVM compiler
backend.  This is separate from the Clang plugin and can be used with
any language that uses LLVM as a backend compiler.

@item --enable-maintainer-mode
This enables the regeneration of the @file{Makefile} and
@file{configure} files when building the @command{annobin} sources.

@end table
@c man end

@c -----------------------------------------------------------------
@node Legacy Scripts
@chapter How to use the information stored in the binary.

The @command{annobin} package includes some example scripts that
demonstrate how the binary information can be used.

@emph{NOTE}: These scripts are now redundant, their functionality
having been subsumed into the @command{annocheck} program.  However
they are still useful as examples of how the annobin data can be
consumed, so they are still included in the annobin sources.

The scripts are:

@menu
* Who Built Me::       The built-by script
* ABI Checking::       The check-abi script
* Hardening Checks::   The hardened script
* Checking Archives::  The run-on-binaries-in script
@end menu

@c -----------------------------------------------------------------
@node Who Built Me
@section The built-by script

@c man title built-by Who Built Me

@smallexample
@c man begin SYNOPSIS built-by
built-by
  [@b{--help}]
  [@b{--version}]
  [@b{--verbose}]
  [@b{--quiet}]
  [@b{--silent}]
  [@b{--ignore}]
  [@b{--readelf=}@var{path}]
  [@b{--tmpdir=}@var{dir}]
  [@b{--tool=}@var{name}]
  [@b{--nottool=}@var{name}]
  [@b{--before=}@var{date}]
  [@b{--after=}@var{date}]
  [@b{--minver=}@var{version}]
  [@b{--maxver=}@var{version}]
  [@b{--}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION built-by

The @file{built-by} script reports the name and version of the tool
used to build the specified file(s).  This script also demonstrates
how information can be extracted from other other locations in the
file, not just the binary annotation notes.

The script can also be used to filter files, only reporting those
built by a specific tool, or a specific version of a tool, or even by
a version of a tool that was built between a range of dates.

The options available are:

@table @samp

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --ignore
Do not report file types that do not contain any builder information.

@item --tool=@var{name}
Only report binaries built by @var{name}.  The @var{name} is only an
ordinary string, not a regular expression.

@item --nottool=@var{name}
Skip any binary build by @var{name}.  The @var{name} is only an
ordinary string, not a regular expression.

@item --before=@var{date}
Only report binaries built by a tool that was created before
@var{date}.  @var{date} has the format @var{YYYYMMDD}.

@item --after=@var{date}
Only report binaries built by a tool that was created after
@var{date}.  When combined with the @option{--before} option can be
used to restrict output to files which were built by tools created in
a specific date range.

@item --minver=@var{version}
Only report binaries built by a tool whose version is @var{version} or
higher.  The @var{version} string should be in the form @var{V.V.V},
for example @var{6.2.1}.

@item --maxver=@var{version}
Only report binaries built by a tool whoes version is @var{version} or
lower.  Can be combined with the @option{--minver} option to restrict
output to those binaries created by tools within a specific version
range.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table

@c man end

@c -----------------------------------------------------------------
@node ABI Checking
@section The check-abi script

@c man title check-abi ABI Checking

@smallexample
@c man begin SYNOPSIS check-abi
check-abi
  [@b{--help}]
  [@b{--version}]
  [@b{--verbose}]
  [@b{--quiet}]
  [@b{--silent}]
  [@b{--inconsistencies}]
  [@b{--ignore-unknown}]
  [@b{--ignore-}@var{ABI|enum|FORTIFY|stack-prot}]
  [@b{--readelf=}@file{path}]
  [@b{--tmpdir=}@file{dir}]
  [@b{--}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION check-abi

The @file{check-abi} script reports any potential ABI conflicts in
the files specified.  This includes the use of the
@option{-fshort-enums} option, the @option{-fstack-protector} option
and the @option{-D_FORTIFY_SOURCE} option.  All of these can affect
passing data between functions and hence should be used uniformly
throughout the binary.

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --inconsitencies
@itemx -i
Only report files with potential ABI problems.

@item --ignore-unknown
Do not report file types that are not supported or recognised.

@item --ignore-@var{ABI|enum|FORTIFY|stack-prot}
Disables individual ABI checks.  Multiple occurences of this option
accumulate.  Possible option values are:

@table @samp
@item ABI
Disable checks of the general ABI information.

@item enum
Disable checks of the @option{-fshort-enum} option.

@item FORTIFY
Disable checks of the @samp{-D_FORTIFY_SOURCE} option.

@item stack-prot
Disable checks of the @option{-fstack-protect} option.
@end table

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table

@c man end

@c -----------------------------------------------------------------
@node Hardening Checks
@section The hardened script

@c man title hardened  Hardening Checks

@smallexample
@c man begin SYNOPSIS hardened
hardened
  [@b{--help}]
  [@b{--version}]
  [@b{--verbose}]
  [@b{--quiet}]
  [@b{--ignore-unknown}]
  [@b{--silent}]
  [@b{--vulnerable}]
  [@b{--not-hardened}]
  [@b{--all}]
  [@b{--file-type=}@var{auto|lib|exec|obj}]
  [@b{--skip=}@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet|realign}]
  [@b{--readelf=}@file{path}]
  [@b{--tmpdir=}@file{dir}]
  [@b{--}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION hardened

The @file{hardened} script reports on the hardening status of the
specified file(s).  In particular it checks that the whole file was
compiled with @option{-O2} or higher and the
@option{-fstack-protector-strong}, @option{-D_FORTIFY_SOURCE=2},
@option{-Wl,-z,now}, @option{-Wl,-z,relro}, @option{-fPIE}, 
@option{-Wp,-D_GLIBCXX_ASSERTIONS}, @option{-fstack-clash-protection}
@option{-fcf-protection=full} and @option{-mcet}
options.

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --ignore-unknown
@itemx -i
Do not report file types that are not supported or recognised.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --silent
@itemx -s
Produce no output.  Just return an exit status.

@item --vulnerable
@itemx -u
Only report files that are known to be vulnerable.  Ie files that
record all of the necessary information about how they were built,
but which were built with an incorrect set of options.

This option is the default behaviour of the script.

@item --not-hardened
@itemx -n
Report any file that cannot be proven to be hardened.  This is like
the @option{--vulnerable} option, except that it will also report
files that do not record all of the necessary information.

@item --all
@itemx -a
Report the hardening status of all of the files examined.

@item --file-type=@var{auto|lib|exec|obj}
@itemx -f=@var{auto|lib|exec|obj}
Specifies the type of file being examined.  Possible values are:

@table @samp
@item auto
Automatically determine the file type from its extension.
This is the default.
@item lib
Assume all files are shared libraries.  Checks that the @option{-fPIC}
option was used.
@item exec
Assume all files are executables.  Checks that the @option{-fPIE}
option was used.
@item obj
Assume all files are object files.  Skips checks of the bind now status.
@end table

@item --skip=@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet}
@itemx -k=@var{opt|stack|fort|now|relro|pic|operator|clash|cf|cet}
Disables checks of various different hardening features.    This
option can be repeated multiple times, and the values accumulate.
Possible values are:

@table @samp
@item opt
Disables checks of the optimization level used.

@item stack
Disables checks of the stack protection level.

@item fort
Disables checks for @env{-D_FORTIFY_SOURCE}.

@item now
Disables checks for @samp{BIND NOW} status.

@item relro
Disables checks for @samp{relro} or read-only-relocs.

@item pic
Disables checks for @option{-fPIC}/@option{-fPIE}.

@item operator
Disables checks for @samp{-D_GLIBCXX_ASSERTIONS}.

@item clash
Disables checks for stack clash protection.

@item cf
Disables checks for control flow protection.
Note - these checks are only run on x86_64 binaries.

@item cet
Disables checks for control flow enforcement.
Note - these checks are only run on x86_64 binaries.

@item realign
Disable checks for stack realignment.
Note - these checks are only run on i686 binaries.
@end table

@item --readelf=@file{path}
@itemx -r=@file{path}
Use the specified program to read the notes from the files.

@item --
Stop accumulating command line options.  This allows the script to be
run on files whose names starts with a dash.

@end table

@c man end

@c -----------------------------------------------------------------
@node Checking Archives
@section The run-on-binaries-in script

@c man title run-on-binries  Checking Archives

@smallexample
@c man begin SYNOPSIS run-on-binaries-in
run-on-binaries-in
  [@b{--help}]
  [@b{--version}]
  [@b{--verbose}]
  [@b{--quiet}]
  [@b{--ignore}]
  [@b{--prefix=}@samp{text}]
  [@b{--tmpdir=}@file{dir}]
  [@b{--files-from=}@file{file}]
  [@b{--skip-list=}@file{file}]
  [@b{--}]
  @file{program}
  [@b{program-options}]
  @var{file}@dots{}
@c man end
@end smallexample

@c man begin DESCRIPTION run-on-binaries-in

The @file{run-on-binaries-in} script allows other scripts, or
programs, to be run on the executable files contained inside archives.
This includes @samp{rpm} files, @samp{tar} and @samp{ar} files and
compressed files.

The script does not recurse into directories, but this can be handled
by the @code{find} command, like this:

@smallexample
  find . -type f -exec run-on-binaries-in <script-to-run> @{@} \;
@end smallexample

The script accepts the following command line options:
@table @env

@item --help
@itemx -h
Displays the usage of the script and then exits.

@item --version
@itemx -v
Displays the version of the script.

@item --verbose
@itemx -V
Enables verbose mode, causing the script to detail each action it
takes.

If this option is repeated it has the special effect of cancelling out
the automatic addition of the  @option{-i} to recursive invocations of
the script.

@item --quiet
@itemx -q
Do not include the name of script in the out generated by the script.

@item --ignore
@itemx -i
Do not report file types that are not supported or recognised.

This option is automatically enabled when the script is recursively
invoked on an archive, unless the @option{-V} @option{-V} has been
enabled.  This is because it is assumed that archives are likely to
contain files that do not need to be scanned.

@item --prefix=@samp{text}
@itemx -p=@samp{text}
Add this text to the output from the script when it runs the program
on a normal executable.

@item --tmpdir=@file{dir}
@itemx -t=@file{dir}
Directory to use to store temporary files.

@item --files-from=@file{file}
@itemx -f=@file{file}
Specifies a file containing a list of other files to examine,
one per line.

@item --skip-list=@file{file}
@itemx -s=@file{file}
Specifies a file containing a list of files not to examine, one per
line.  Blank lines and comments are ignored.  Text after a file's name
is also ignored.  Filenames should start at the beginning of a line.

@item --
Stops processing of command line options.  This allows the script to
be run with a program whoes name starts with a dash.

@end table

@c man end

@c -----------------------------------------------------------------
@node GNU FDL
@appendix GNU Free Documentation License
@include fdl.texi

@bye

